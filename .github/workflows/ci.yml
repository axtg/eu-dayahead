name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint --if-present

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test

      - name: Run tests with coverage
        run: npm run test:coverage --if-present

      - name: Upload coverage to Codecov
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run vulnerability scan
        run: npx audit-ci --config audit-ci.json
        continue-on-error: true

  build-and-validate:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate OpenAPI spec
        run: |
          # Check if OpenAPI file exists
          if [ ! -f "docs/openapi.yaml" ]; then
            echo "‚ùå OpenAPI spec file not found"
            exit 1
          fi

          # Validate using our npm script
          npm run validate-api

      - name: Build project
        run: npm run build --if-present

      - name: Test API endpoints (smoke test)
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3000/api/countries || exit 1
          pkill node
        env:
          NODE_ENV: test
          PORT: 3000

  # docker:
  #   name: Docker Build
  #   runs-on: ubuntu-latest
  #   needs: [test, security]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_USERNAME }}/eu-energy-api:latest
  #           ${{ secrets.DOCKER_USERNAME }}/eu-energy-api:${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [build-and-validate]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
  #   environment: staging

  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [build-and-validate, docker]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment: production

  #   steps:
  #     - name: Deploy to production
  #       run: |
  #         echo "Deploying to production environment..."
  #         # Add your production deployment commands here
  #         # curl -X POST https://your-production-webhook.com/deploy

  # release:
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   needs: [deploy-production]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Generate changelog
  #       id: changelog
  #       uses: conventional-changelog/standard-version@v9
  #       with:
  #         dry-run: true

  #     - name: Create Release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: v${{ steps.changelog.outputs.version }}
  #         release_name: Release v${{ steps.changelog.outputs.version }}
  #         body: ${{ steps.changelog.outputs.changelog }}
  #         draft: false
  #         prerelease: false
